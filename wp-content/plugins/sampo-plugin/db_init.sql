CREATE TABLE IF NOT EXISTS orders_registration (
    id int NOT NULL AUTO_INCREMENT,
    ApplicantType int,
    FirstName VARCHAR(34),
    MiddleName VARCHAR(34),
    LastName  VARCHAR(34),
    Gender int,
    BirthDate DATE,
    IdentityDocumentType int DEFAULT 21,
    DocumentSeries VARCHAR(10),
    DocumentNumber VARCHAR(10),
    DocumentIssueDate DATE,
    DocumentIssuerName  VARCHAR(120),
    DocumentIssuerCode VARCHAR(10),
    InnPersonal VARCHAR(20),
    Snils VARCHAR(20),
    OrganizationName VARCHAR(240),
    OrganizationShortName VARCHAR(160),
    LegalHeadPosition VARCHAR(80),
    LegalHeadAge int,
    LegalCapital int,
    CountryCodeLegal int,
    RegionCodeLegal int,
    CityLegalType int,
    CityLegalValue VARCHAR(53),
    DistrictLegalType int,
    DistrictLegalValue VARCHAR(59),
    SettlementLegalType int,
    SettlementLegalValue VARCHAR(59),
    AddressLegalType int,
    AddressLegalValue  VARCHAR(99),
    BuildingLegalType int,
    BuildingLegalValue  VARCHAR(20),
    ApartmentLegalType int,
    ApartmentLegalValue  VARCHAR(20),
    RoomLegalType int,
    RoomLegalValue  VARCHAR(20),
    CountryCodeResidential int,
    RegionCodeResidential int,
    CityResidentialType int,
    CityResidentialValue  VARCHAR(53),
    DistrictResidentialType int,
    DistrictResidentialValue  VARCHAR(59),
    SettlementResidentialType int,
    SettlementResidentialValue  VARCHAR(59),
    AddressResidentialType int,
    AddressResidentialValue  VARCHAR(99),
    BuildingResidentialType int,
    BuildingResidentialValue  VARCHAR(20),
    ApartmentResidentialType int,
    ApartmentResidentialValue  VARCHAR(20),
    RoomResidentialType int,
    RoomResidentialValue  VARCHAR(20),
    Email VARCHAR(40),
    Phone VARCHAR(10),
    Okved2_id int,
    Okved2Main VARCHAR(20),
    TaxSystem int,
    TaxObject int,
    FtsDivisionCode  VARCHAR(10),
    CitizenshipCode int DEFAULT 643,
    HeadFarm boolean,
    ConsentToProcessingPersonalData boolean,
    EmailConfirmed boolean DEFAULT false,
    PhoneConfirmed boolean DEFAULT false,
    StatusId int,
    user_id int,
    oreder_date timestamp DEFAULT CURRENT_TIMESTAMP,
    PlaceOfBirth VARCHAR(80),
    PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS orders_Okved2 (
    id int NOT NULL AUTO_INCREMENT,
    order_id int,
    Okved2 VARCHAR(10),
    PRIMARY KEY (id)
    );


CREATE TABLE IF NOT EXISTS orders_files(
    id int NOT NULL AUTO_INCREMENT,
    file_name VARCHAR(256),
    file_type int,
    ordr_id int,
    url VARCHAR(256),
    PRIMARY KEY (id)
    );


DROP TABLE IF  EXISTS CityResidentials; 
CREATE TABLE IF NOT EXISTS CityResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    name VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO CityResidentials (Type, name)
VALUES 
(1 ,"Город"),
(2 ,"Населенный пункт"),
(3 ,"Дачный поселок"),
(4 ,"Сельский поселок"),
(5 ,"Поселок городского типа"),
(6 ,"Рабочий поселок"),
(7 ,"Курортный поселок"),
(8 ,"Городской поселок"),
(9 ,"Поселок"),
(10,"Аал"),
(11,"Арбан"),
(12,"Аул"),
(13,"Выселки"),
(14,"Городок"),
(15,"Заимка"),
(16,"Починок"),
(17,"Кишлак"),
(18,"Поселок при станции"),
(19,"Поселок при железнодорожной станции"),
(20,"Железнодорожный блокпост"),
(21,"Местечко"),
(22,"Деревня"),
(23,"Село"),
(24,"Слобода"),
(25,"Станция"),
(26,"Станица"),
(27,"Улус"),
(28,"Хутор"),
(29,"Разъезд"),
(30,"Зимовье")
;
DROP TABLE IF  EXISTS DistrictResidentials; 
CREATE TABLE IF NOT EXISTS DistrictResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(99),
    PRIMARY KEY (id)
);
INSERT INTO DistrictResidentials (Type, value)
VALUES 
(1, "Муниципальный район"),
(2, "Городской округ"),
(3, "Внутригородская территория (внутригородское муниципальное образование) города федерального значения"),
(4, "Муниципальный округ"),
(5, "Федеральная территория")
;
DROP TABLE IF  EXISTS SettlementResidentials;
CREATE TABLE IF NOT EXISTS SettlementResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO SettlementResidentials (Type, value)
VALUES 
(1, "Городское поселение"),
(2, "Сельское поселение"),
(3, "Межселенная территория в составе муниципального района"),
(4, "Внутригородской район городского округа");



DROP TABLE IF  EXISTS AddressResidentials;
CREATE TABLE IF NOT EXISTS AddressResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(80),
    PRIMARY KEY (id)
);
INSERT INTO AddressResidentials (Type, value)
VALUES 
(1,  "Улица"),
(2,  "Шоссе"),
(3,  "Аллея"),
(4,  "Бульвар"),
(5,  "Взвоз"),
(6,  "Въезд"),
(10, "Дорога"),
(11, "Заезд"),
(12, "Километр"),
(13, "Кольцо"),
(14, "Коса"),
(16, "Линия"),
(17, "Магистраль"),
(18, "Набережная"),
(19, "Переезд"),
(20, "Переулок"),
(21, "Площадка"),
(22, "Площадь"),
(23, "Проезд"),
(24, "Просек"),
(25, "Просека"),
(26, "Проселок"),
(27, "Проспект"),
(28, "Проулок"),
(29, "Разъезд"),
(30, "Ряд"),
(31, "Сквер"),
(32, "Спуск"),
(33, "Съезд"),
(34, "Тракт"),
(35, "Тупик");


DROP TABLE IF  EXISTS BuildingResidentials;
CREATE TABLE IF NOT EXISTS BuildingResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO BuildingResidentials (Type, value)
VALUES 
(1, "Владение"),
(2, "Дом"),
(3, "Домовладение"),
(4, "Здание"),
(5, "Павильон"),
(6, "Сооружение"),
(7, "Строение"),
(8, "Корпус");


DROP TABLE IF  EXISTS ApartmentResidentials;
CREATE TABLE IF NOT EXISTS ApartmentResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO ApartmentResidentials(Type, value)
VALUES 

(1, "Квартира"),
(2, "Комната"),
(3, "Офис"),
(4, "Помещение");


DROP TABLE IF  EXISTS RoomResidentials;
CREATE TABLE IF NOT EXISTS RoomResidentials (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO RoomResidentials(Type, value)
VALUES 
(1, "Комната"),
(2, "Офис"),
(3, "Помещение");


DROP TABLE IF  EXISTS OrderStatuses;
CREATE TABLE IF NOT EXISTS OrderStatuses (
    id int NOT NULL AUTO_INCREMENT,
    Type int,
    value VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO OrderStatuses(Type, value)
VALUES 

(1 , "Черновик"),
(2 , "Создана (сохранена, готова к запуску процесса)"),
(3 , "Отменена заявителем"),
(4 , "Ожидание подписания заявления в ФНС электронной подписью (ЭП) заявителя"),
(5 , "Отклонена модератором"),
(10, "Ожидание отправки проверки в СМЭВ"),
(11, "Отправлено в СМЭВ"),
(12, "Проверка в СМЭВ успешно завершена"),
(13, "Не прошла проверки в СМЭВ"),
(14, "Ошибка запроса в СМЭВ"),
(20, "Ожидание отправки в ФНС"),
(21, "Отправлено в ФНС"),
(22, "Регистрация в ФНС успешно завершена"),
(23, "Отказ в регистрации от ФНС");


DROP TABLE IF  EXISTS Attachments;
CREATE TABLE IF NOT EXISTS Attachments (
    id int NOT NULL AUTO_INCREMENT,
    code int,
    catecory_id int,
    description VARCHAR(99),
    PRIMARY KEY (id)
);

INSERT INTO Attachments(code, catecory_id, description)
VALUES 

(1010, 1, "Фотография клиента с паспортом."),
(1020, 1,  "Паспорт. Страница с фотографией и страница с регистрацией (один многостраничный файл)."),
(2000, 1, "Устав компании."),
(2010, 1, "Выписка из ЕГРН."),
(4000, 1, "Заявление об установлении единственного учредителя."),
(994000, 2, "Отсоединенная подпись заявления об установлении единственного учредителя."),
(991020, 2, "Отсоединенная подпись паспорта."),
(992000, 2, "Отсоединенная подпись устава компании"),
(11001, 1, "Заполненное заявление в ФНС на создание ЮЛ"),
(9911001, 2, "Отсоединенная подпись заявления в ФНС на создание ЮЛ"),
(21001, 1, "Заполненное заявление в ФНС на создание ИП"),
(9921001, 2, "Отсоединенная подпись заявления в ФНС на создание ИП"),
(1150001, 1, "Уведомление о переходе на УСН"),
(991150001, 2, "Отсоединенная подпись уведомления о переходе на УСН"),
(8821, 1, "XML опись заявления ИП"),
(998821, 2, "Отсоединенная подпись XML описи заявления ИП"),
(8811, 1, "XML опись заявления ЮЛ"),
(998811, 2, "Отсоединенная подпись XML описи заявления ЮЛ");


DROP TABLE IF  EXISTS StatusCodesFNC;
CREATE TABLE IF NOT EXISTS StatusCodesFNC (
    id int NOT NULL AUTO_INCREMENT,
    code int,
    description VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO StatusCodesFNC(code, description)
VALUES 

(0, "Идёт предварительная проверка"),
(10, "Заявка поставлена в очередь на обработку"),
(15, "Заявка принята, сформирована квитанция о приеме"),
(19, "Ошибка адресации сведений"),
(20, "Найдены несоответствия ЭЦП"),
(30, "Заявка принята к исполнению, выдана расписка"),
(40, "Отказ в регистрации"),
(50, "Зарегистрировано");

DROP TABLE IF  EXISTS CodesFNC;
CREATE TABLE IF NOT EXISTS CodesFNC (
    id int NOT NULL AUTO_INCREMENT,
    regioncode VARCHAR(5),
    code VARCHAR(5),
    description VARCHAR(80),
    PRIMARY KEY (id)
);

INSERT INTO CodesFNC(regioncode, code, description)
VALUES 

(01, "0100", "УФНС России по Республике Адыгея"),
(02, "0280", "Межрайонная ИФНС № 39 по Республике Башкортостан"),
(03, "0300", "УФНС России по Республике Бурятия"),
(04, "0400", "Управление ФНС России по Республике Алтай"),
(05, "0500", "УФНС России по Республике Дагестан"),
(06, "0600", "УФНС России по Республике Ингушетия"),
(07, "0700", "Управление ФНС России по Кабардино-Балкарской Республике"),
(08, "0800", "УФНС России по Республике Калмыкия"),
(09, "0900", "УФНС по КЧР"),
(10, "1000", "УФНС России по Республике Карелия"),
(11, "1100", "УФНС России по Республике Коми"),
(12, "1200", "УФНС России по Республике Марий Эл"),
(13, "1300", "УФНС России по Республике Мордовия"),
(14, "1400", "Управление ФНС России по Республике Саха (Якутия)"),
(15, "1500", "УФНС России по Республике Северная Осетия - Алания"),
(16, "1690", "Межрайонная ИФНС России № 18 по Республике Татарстан"),
(17, "1700", "УФНС России по Республике Тыва"),
(18, "1800", "Управление ФНС России по Удмуртской Республике"),
(19, "1900", "УФНС России по Республике Хакасия"),
(20, "2000", "УФНС России по Чеченской Республике"),
(21, "2100", "УФНС России по Чувашской Республике"),
(22, "2202", "Межрайонная ИФНС России № 16 по Алтайскому краю"),
(23, "2375", "Межрайонная ИФНС России № 16 по Краснодарскому краю"),
(24, "2468", "Межрайонная ИФНС России № 23 по Красноярскому краю"),
(25, "2536", "Межрайонная ИФНС России № 15 по Приморскому краю"),
(26, "2651", "Межрайонная ИФНС России № 11 по Ставропольскому краю"),
(27, "2700", "УФНС России по Хабаровскому краю"),
(28, "2800", "УФНС России по Амурской области"),
(29, "2900", "УФНС России по Архангельской области и Ненецкому автономному округу"),
(30, "3000", "УФНС России по Астраханской области"),
(31, "3100", "УФНС России по Белгородской области"),
(32, "3200", "УФНС России по Брянской области"),
(33, "3300", "УФНС России по Владимирской области"),
(34, "3443", "ИФНС России по Дзержинскому району г. Волгограда"),
(35, "3500", "УФНС России по Вологодской области"),
(36, "3668", "Межрайонная ИФНС России № 12 по Воронежской области"),
(37, "3700", "УФНС России по Ивановской области"),
(38, "3850", "Межрайонная ИФНС России № 17 по Иркутской области"),
(39, "3900", "УФНС России по Калининградской области"),
(40, "4000", "УФНС России по Калужской области"),
(41, "4100", "УФНС России по Камчатскому краю"),
(42, "4205", "Межрайонная ИФНС России № 15 по Кемеровской области - Кузбассу"),
(43, "4300", "УФНС России по Кировской области"),
(44, "4400", "УФНС России по Костромской области"),
(45, "4500", "УФНС России по Курганской области"),
(46, "4600", "УФНС России по Курской области"),
(47, "4704", "Межрайонная ИФНС России №10 по Ленинградской области"),
(48, "4800", "УФНС России по Липецкой области"),
(49, "4900", "УФНС России по Магаданской области"),
(50, "5081", "Межрайонная ИФНС России №23 по Московской области"),
(51, "5100", "УФНС России по Мурманской области"),
(52, "5275", "МРИ ФНС России № 15 по Нижегородской области"),
(53, "5300", "УФНС России по Новгородской области"),
(54, "5476", "Межрайонная ИФНС России № 16 по Новосибирской области"),
(55, "5543", "Межрайонная ИФНС России № 12 по Омской области"),
(56, "5658", "Межрайонная ИФНС России № 10 по Оренбургской области"),
(57, "5700", "УФНС России по Орловской области"),
(58, "5800", "УФНС России по Пензенской области"),
(59, "5958", "Межрайонная ИФНС России № 17 по Пермскому краю"),
(60, "6000", "УФНС России по Псковской области"),
(61, "6196", "Межрайонная ИФНС России № 26 по Ростовской области"),
(62, "6200", "УФНС России по Рязанской области"),
(63, "6327", "Межрайонная ИФНС России № 24 по Самарской области"),
(64, "6457", "Межрайонная ИФНС России №22 по Саратовской области"),
(65, "6500", "УФНС России по Сахалинской области"),
(66, "6658", "ИФНС России по Верх-Исетскому району г.Екатеринбурга"),
(67, "6700", "УФНС России по Смоленской области"),
(68, "6800", "УФНС России по Тамбовской области"),
(69, "6900", "УФНС России по Тверской области"),
(70, "7000", "УФНС России по Томской области"),
(71, "7100", "УФНС России по Тульской области"),
(72, "7232", "Межрайонная ИФНС России № 14 по Тюменской области"),
(73, "7300", "УФНС России по Ульяновской области"),
(74, "7456", "Межрайонная ИФНС России № 17 по Челябинской области"),
(75, "7500", "УФНС России по Забайкальскому краю"),
(76, "7627", "Межрайонная ИФНС России № 7 по Ярославской области"),
(77, "7746", "Межрайонная ИФНС России № 46 по г. Москве"),
(78, "7847", "Межрайонная ИФНС России №15 по Санкт-Петербургу"),
(79, "7900", "УФНС России по Еврейской автономной области"),
(86, "8617", "Межрайонная ИФНС России № 11 по Ханты-Мансийскому автономному округу - Югре"),
(87, "8700", "УФНС России по Чукотскому автономному округу"),
(89, "8900", "УФНС России по Ямало-Ненецкому автономному округу"),
(90, "9001", "Межрайонная ИФНС России № 1 по Запорожской области"),
(91, "9112", "Межрайонная ИФНС России № 9 по Республике Крым"),
(92, "9200", "УФНС России по г. Севастополю"),
(93, "9301", "Межрайонная ИФНС России № 1 по Донецкой Народной Республике"),
(94, "9401", "Межрайонная ИФНС России № 1 по Луганской Народной Республике"),
(95, "9500", "УФНС России по Херсонской области"),
(99, "9901", "ИФНС России по городу и космодрому Байконуру");


DROP TABLE IF  EXISTS RegionCodeLegals;
CREATE TABLE IF NOT EXISTS RegionCodeLegals (
    id int NOT NULL AUTO_INCREMENT,
    regioncode VARCHAR(5),
    description VARCHAR(99),
    PRIMARY KEY (id)
);

INSERT INTO RegionCodeLegals(regioncode,  description)
VALUES 

("01", "Республика Адыгея (Адыгея)"),
("02", "Республика Башкортостан"),
("03", "Республика Бурятия"),
("04", "Республика Алтай"),
("05", "Республика Дагестан"),
("06", "Республика Ингушетия"),
("07", "Кабардино-Балкарская Республика"),
("08", "Республика Калмыкия"),
("09", "Карачаево-Черкесская Республика"),
("10", "Республика Карелия"),
("11", "Республика Коми"),
("12", "Республика Марий Эл"),
("13", "Республика Мордовия"),
("14", "Республика Саха (Якутия)"),
("15", "Республика Северная Осетия - Алания"),
("16", "Республика Татарстан (Татарстан)"),
("17", "Республика Тыва"),
("18", "Удмуртская Республика"),
("19", "Республика Хакасия"),
("20", "Чеченская Республика"),
("21", "Чувашская Республика - Чувашия"),
("22", "Алтайский край"),
("23", "Краснодарский край"),
("24", "Красноярский край"),
("25", "Приморский край"),
("26", "Ставропольский край"),
("27", "Хабаровский край"),
("28", "Амурская область"),
("29", "Архангельская область"),
("30", "Астраханская область"),
("31", "Белгородская область"),
("32", "Брянская область"),
("33", "Владимирская область"),
("34", "Волгоградская область"),
("35", "Вологодская область"),
("36", "Воронежская область"),
("37", "Ивановская область"),
("38", "Иркутская область"),
("39", "Калининградская область"),
("40", "Калужская область"),
("41", "Камчатский край"),
("42", "Кемеровская область"),
("43", "Кировская область"),
("44", "Костромская область"),
("45", "Курганская область"),
("46", "Курская область"),
("47", "Ленинградская область"),
("48", "Липецкая область"),
("49", "Магаданская область"),
("50", "Московская область"),
("51", "Мурманская область"),
("52", "Нижегородская область"),
("53", "Новгородская область"),
("54", "Новосибирская область"),
("55", "Омская область"),
("56", "Оренбургская область"),
("57", "Орловская область"),
("58", "Пензенская область"),
("59", "Пермский край"),
("60", "Псковская область"),
("61", "Ростовская область"),
("62", "Рязанская область"),
("63", "Самарская область"),
("64", "Саратовская область"),
("65", "Сахалинская область"),
("66", "Свердловская область"),
("67", "Смоленская область"),
("68", "Тамбовская область"),
("69", "Тверская область"),
("70", "Томская область"),
("71", "Тульская область"),
("72", "Тюменская область"),
("73", "Ульяновская область"),
("74", "Челябинская область"),
("75", "Забайкальский край"),
("76", "Ярославская область"),
("77", "Москва"),
("78", "Санкт-Петербург"),
("79", "Еврейская автономная область"),
("83", "Ненецкий автономный округ"),
("86", "Ханты-Мансийский автономный округ - Югра"),
("87", "Чукотский автономный округ"),
("89", "Ямало-Ненецкий автономный округ"),
("99", "Иные территории, включая город и космодром Байконур");



DROP TABLE IF  EXISTS FileTypeCodes;
CREATE TABLE IF NOT EXISTS FileTypeCodes (
    id int NOT NULL AUTO_INCREMENT,
    file_code int,
    type_name VARCHAR(99),
    is_signature boolean DEFAULT(0),
    signature_code int DEFAULT(0),
    autogen boolean DEFAULT(0),
    ApplicantType tinyint DEFAULT(0),
    PRIMARY KEY (id),
    INDEX (file_code)
);

INSERT INTO FileTypeCodes(file_code,  type_name, is_signature, signature_code, ApplicantType, autogen)
VALUES 
(1010,"Фотография заявителя с паспортом",0,0,0,0),
(1020,"Паспорт. Страница с фотографией и страница с регистрацией (один многостраничный файл)",0,991020,0,0),
(2000,"Устав компании",0,992000,1,0),
(2010,"Выписка из ЕГРН",0,0,1,0),
(4000,"Заявление об установлении единственного учредителя",0,994000,1,1),
(11001,"Заполненное заявление в ФНС на создание ЮЛ",0,9911001,1,1),
(21001,"Заполненное заявление в ФНС на создание ИП",0,9921001,2,1),
(1150001,"Уведомление о переходе на УСН",0,991150001,0,1),
(8821,"XML опись заявления ИП",0,998821,2,1),
(8811,"XML опись заявления ЮЛ",0,998811,1,1),
(991020,"Отсоединенная подпись паспорта.",1,0,0,0),
(992000,"Отсоединенная подпись устава компании",1,0,1,0),
(994000,"Отсоединенная подпись заявления об установлении единственного учредителя",1,0,1,0),
(9911001,"Отсоединенная подпись заявления в ФНС на создание ЮЛ",1,0,1,0),
(9921001,"Отсоединенная подпись заявления в ФНС на создание ИП",1,0,2,0),
(991150001,"Отсоединенная подпись уведомления о переходе на УСН",1,0,0,0),
(998821,"Отсоединенная подпись XML описи заявления ИП",1,0,2,0),
(998811,"Отсоединенная подпись XML описи заявления ЮЛ",1,0,1,0);






